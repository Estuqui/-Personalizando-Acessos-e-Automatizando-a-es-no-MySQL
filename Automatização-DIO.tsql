-- Parte 1 – Personalizando acessos com views

--1. Número de empregados por departamento e localidade

CREATE VIEW vw_empregados_por_departamento_localidade AS
SELECT 
    d.department_name,
    d.location,
    COUNT(e.employee_id) AS total_empregados
FROM 
    employees e
JOIN 
    departments d ON e.department_id = d.department_id
GROUP BY 
    d.department_name, d.location;

--2. Lista de departamentos e seus gerentes

CREATE VIEW vw_departamentos_gerentes AS
SELECT 
    d.department_name,
    e.employee_name AS gerente
FROM 
    departments d
JOIN 
    employees e ON d.manager_id = e.employee_id;

--3. Projetos com maior número de empregados (ordem decrescente)

CREATE VIEW vw_projetos_maior_num_empregados AS
SELECT 
    p.project_name,
    COUNT(ep.employee_id) AS total_empregados
FROM 
    projects p
JOIN 
    employee_project ep ON p.project_id = ep.project_id
GROUP BY 
    p.project_name
ORDER BY 
    total_empregados DESC;

--4. Lista de projetos, departamentos e gerentes

CREATE VIEW vw_projetos_departamentos_gerentes AS
SELECT 
    p.project_name,
    d.department_name,
    e.employee_name AS gerente
FROM 
    projects p
JOIN 
    departments d ON p.department_id = d.department_id
JOIN 
    employees e ON d.manager_id = e.employee_id;

--5. Empregados que possuem dependentes e se são gerentes

CREATE VIEW vw_empregados_dependentes_gerentes AS
SELECT 
    e.employee_name,
    CASE WHEN d.dependent_id IS NOT NULL THEN 'Sim' ELSE 'Não' END AS possui_dependente,
    CASE WHEN e.employee_id IN (SELECT manager_id FROM departments) THEN 'Sim' ELSE 'Não' END AS eh_gerente
FROM 
    employees e
LEFT JOIN 
    dependents d ON e.employee_id = d.employee_id;

--Criação de usuários e permissões

-- Criação dos usuários
CREATE USER 'gerente'@'localhost' IDENTIFIED BY 'senha123';
CREATE USER 'employee'@'localhost' IDENTIFIED BY 'senha123';

-- Permissões para o usuário gerente
GRANT SELECT ON vw_empregados_por_departamento_localidade TO 'gerente'@'localhost';
GRANT SELECT ON vw_departamentos_gerentes TO 'gerente'@'localhost';
GRANT SELECT ON vw_projetos_maior_num_empregados TO 'gerente'@'localhost';
GRANT SELECT ON vw_projetos_departamentos_gerentes TO 'gerente'@'localhost';
GRANT SELECT ON vw_empregados_dependentes_gerentes TO 'gerente'@'localhost';

-- Permissões para o usuário
GRANT SELECT ON vw_empregados_dependentes_gerentes TO 'employee'@'localhost';

--Parte 2 – Criando gatilhos para cenário de e-commerce

CREATE TABLE deleted_users_log (
    user_id INT,
    user_name VARCHAR(100),
    email VARCHAR(100),
    deleted_at DATETIME
);

DELIMITER $$
CREATE TRIGGER trg_before_delete_user
BEFORE DELETE ON users
FOR EACH ROW
BEGIN
    INSERT INTO deleted_users_log(user_id, user_name, email, deleted_at)
    VALUES (OLD.user_id, OLD.user_name, OLD.email, NOW());
END $$
DELIMITER ;

Editar
CREATE TABLE salary_update_log (
    employee_id INT,
    old_salary DECIMAL(10,2),
    new_salary DECIMAL(10,2),
    updated_at DATETIME
);

DELIMITER $$

CREATE TRIGGER trg_before_update_salary
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    IF OLD.salary <> NEW.salary THEN
        INSERT INTO salary_update_log(employee_id, old_salary, new_salary, updated_at)
        VALUES (OLD.employee_id, OLD.salary, NEW.salary, NOW());
    END IF;
END $$
DELIMITER ;